{"version":3,"sources":["webpack://test-0.1.0/webpack/universalModuleDefinition","webpack://test-0.1.0/webpack/bootstrap","webpack://test-0.1.0//root/my-app/node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js","webpack://test-0.1.0//root/my-app/node_modules/@rancher/shell/core/types.ts","webpack://test-0.1.0/./node_modules/@rancher/auto-import","webpack://test-0.1.0/./index.ts","webpack://test-0.1.0//root/my-app/node_modules/@vue/cli-service/lib/commands/build/entry-lib.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","window","currentScript","document","src","match","ExtensionPoint","ActionLocation","PanelLocation","TabLocation","CardLocation","TableColumnLocation","importTypes","$plugin","plugin","metadata","require","addTableColumn","RESOURCE","resource","label","getValue","row","console","log","status","addresses","address","url","formatter","formatterOpts","ONETOUCHURL","internalExternalIP","internalIp","options","internal","target"],"mappings":"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","file":"test-0.1.0.umd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"test-0.1.0\"] = factory();\n\telse\n\t\troot[\"test-0.1.0\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"1c25\");\n","// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  var currentScript = window.document.currentScript\n  if (process.env.NEED_CURRENTSCRIPT_POLYFILL) {\n    var getCurrentScript = require('@soda/get-current-script')\n    currentScript = getCurrentScript()\n\n    // for backward compatibility, because previously we directly included the polyfill\n    if (!('currentScript' in document)) {\n      Object.defineProperty(document, 'currentScript', { get: getCurrentScript })\n    }\n  }\n\n  var src = currentScript && currentScript.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/)\n  if (src) {\n    __webpack_public_path__ = src[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\nexport default null\n","import { ProductFunction } from './plugin';\nimport { RouteConfig, Location } from 'vue-router';\n\n// Cluster Provisioning types\nexport * from './types-provisioning';\n\n// package.json metadata\nexport interface PackageMetadata {\n  name: string;\n  version: string;\n  description: string;\n  icon: string;\n}\n\n// export interface Route {\n//   name: string;\n//   path: string;\n//   component: Object | Function,\n//   children: Route[];\n// }\n\nexport type VuexStoreObject = { [key: string]: any }\nexport type CoreStoreSpecifics = { state: () => VuexStoreObject, getters: VuexStoreObject, mutations: VuexStoreObject, actions: VuexStoreObject }\nexport type CoreStoreConfig = { namespace: string, baseUrl?: string, modelBaseClass?: string, supportsStream?: boolean, isClusterStore?: boolean }\nexport type CoreStoreInit = (store: any, ctx: any) => void;\nexport type RegisterStore = () => (store: any) => void\nexport type UnregisterStore = (store: any) => void\n\nexport type PluginRouteConfig = {parent?: string, route: RouteConfig}\n\nexport type OnEnterLeavePackageConfig = {\n  clusterId: string,\n  product: string,\n  oldProduct: string,\n  isExt: string,\n  oldIsExt: string\n}\n\nexport type OnNavToPackage = (store: any, config: OnEnterLeavePackageConfig) => Promise<void>;\nexport type OnNavAwayFromPackage = (store: any, config: OnEnterLeavePackageConfig) => Promise<void>;\nexport type OnLogOut = (store: any) => Promise<void>;\n\n/** Enum regarding the extensionable areas/places of the UI */\nexport enum ExtensionPoint {\n  ACTION = 'Action', // eslint-disable-line no-unused-vars\n  TAB = 'Tab', // eslint-disable-line no-unused-vars\n  PANEL = 'Panel', // eslint-disable-line no-unused-vars\n  CARD = 'Card', // eslint-disable-line no-unused-vars\n  TABLE_COL = 'TableColumn', // eslint-disable-line no-unused-vars\n}\n\n/** Enum regarding action locations that are extensionable in the UI */\nexport enum ActionLocation {\n  HEADER = 'header-action', // eslint-disable-line no-unused-vars\n  TABLE = 'table-action', // eslint-disable-line no-unused-vars\n}\n\n/** Enum regarding panel locations that are extensionable in the UI */\nexport enum PanelLocation {\n  DETAILS_MASTHEAD = 'details-masthead', // eslint-disable-line no-unused-vars\n  DETAIL_TOP = 'detail-top', // eslint-disable-line no-unused-vars\n  RESOURCE_LIST = 'resource-list', // eslint-disable-line no-unused-vars\n}\n\n/** Enum regarding tab locations that are extensionable in the UI */\nexport enum TabLocation {\n  RESOURCE_DETAIL = 'tab', // eslint-disable-line no-unused-vars\n  CLUSTER_CREATE_RKE2 = 'cluster-create-rke2', // eslint-disable-line no-unused-vars\n}\n\n/** Enum regarding card locations that are extensionable in the UI */\nexport enum CardLocation {\n  CLUSTER_DASHBOARD_CARD = 'cluster-dashboard-card', // eslint-disable-line no-unused-vars\n}\n\n/** Enum regarding table col locations that are extensionable in the UI */\nexport enum TableColumnLocation {\n  RESOURCE = 'resource-list', // eslint-disable-line no-unused-vars\n}\n\n/** Definition of the shortcut object (keyboard shortcuts) */\nexport type ShortCutKey = {\n  windows?: string[];\n  mac?: string[];\n};\n\n/** Definition of the action options (table actions) */\nexport type ActionOpts = {\n  event: any;\n  isAlt: boolean;\n  action: any;\n};\n\n/** Definition of an extension action (options that can be passed when setting an extension action) */\nexport type Action = {\n  label?: string;\n  labelKey?: string;\n  tooltipKey?: string;\n  tooltip?: string;\n  shortcut?: string | ShortCutKey;\n  svg?: Function;\n  icon?: string;\n  multiple?: boolean;\n  enabled?: Function | boolean;\n  invoke: (opts: ActionOpts, resources: any[], globals?: any) => void | boolean | Promise<boolean>;\n};\n\n/** Definition of a panel (options that can be passed when defining an extension panel enhancement) */\nexport type Panel = {\n  component: Function;\n};\n\n/** Definition of a card (options that can be passed when defining an extension card enhancement) */\nexport type Card = {\n  label?: string;\n  labelKey?: string;\n  component: Function;\n};\n\nexport type TableColumn = any;\n\n/** Definition of a tab (options that can be passed when defining an extension tab enhancement) */\nexport type Tab = {\n  name: string;\n  label?: string;\n  labelKey?: string;\n  tooltipKey?: string;\n  tooltip?: string;\n  showHeader?: boolean;\n  weight?: number;\n  component: Function;\n};\n\n/** Definition of the locationConfig object (used in extensions) */\nexport type LocationConfig = {\n  product?: string[],\n  resource?: string[],\n  namespace?: string[],\n  cluster?: string[],\n  id?: string[],\n  mode?: string[],\n  hash?: string[],\n  /**\n   * path match from URL (excludes host address)\n   */\n  path?: { [key: string]: string | boolean}[],\n  /**\n   * Query Params from URL\n   */\n  queryParam?: { [key: string]: string},\n  /**\n   * Context specific params.\n   *\n   * Components can provide additional context specific params that this value must match\n   */\n  context?: { [key: string]: string},\n};\n\nexport interface ProductOptions {\n  /**\n   * The category this product belongs under. i.e. 'config'\n   */\n  category?: string;\n\n  /**\n   * Hide the Copy KubeConfig button in the header\n   */\n  hideCopyConfig?: boolean;\n\n  /**\n   * Hide the Download KubeConfig button in the header\n   */\n  hideKubeConfig?: boolean;\n\n  /**\n   * Hide the Kubectl Shell button in the header\n   */\n  hideKubeShell?: boolean;\n\n  /**\n   * Hide the Namespace location\n   */\n  hideNamespaceLocation?: boolean;\n\n  /**\n   * Hide the system resources\n   */\n\n  hideSystemResources?: boolean;\n  /**\n   * The icon that should be displayed beside this item in the navigation.\n   */\n  icon?: string,\n\n  /**\n   * Only load the product if the feature is present\n   */\n  ifFeature?: string | RegExp;\n\n  /**\n   * Only load the product if the type is present\n   */\n  ifHave?: string;\n\n  /**\n   * Only load the product if the group is present\n   */\n  ifHaveGroup?: string | RegExp;\n\n  /**\n   * Only load the product if the type is present\n   */\n  ifHaveType?: string | RegExp;\n\n  /**\n   * The vuex store that this product should use by default i.e. 'management'\n   */\n  inStore?: string;\n\n  /**\n   * Show the cluster switcher in the navigation\n   */\n  showClusterSwitcher?: boolean;\n\n  /**\n   * Show the namespace filter in the header\n   */\n  showNamespaceFilter?: boolean;\n\n  /**\n   * A number used to determine where in navigation this item will be placed. The highest number will be at the top of the list.\n   */\n  weight?: number;\n\n  /**\n   * The route that the product will lead to if click on in navigation.\n   */\n  to?: Location;\n\n  /**\n   * Leaving these here for completeness but I don't think these should be advertised as useable to plugin creators.\n   */\n  // ifHaveVerb: string | RegExp;\n  // removable: string;\n  // showWorkspaceSwitcher: boolean;\n  // supportRoute: string;\n  // typeStoreMap: string;\n}\n\nexport interface HeaderOptions {\n  /**\n   * Name of the header. This should be unique.\n   */\n  name?: string;\n\n  /**\n   * A string that will show in the table column as a header\n   */\n  label?: string;\n\n  /**\n   * A translation key where the resulting string will show in the table column as a header\n   */\n  labelKey?: string;\n\n  /**\n   * A string which represents the path to access the value from the row object i.e. `row.meta.value`.\n   */\n  value?: string;\n\n  /**\n   * A string which represents the path to access the value from the row object which we'll use to sort i.e. `row.meta.value`\n   */\n  sort?: string | string[];\n\n  /**\n   * A string which represents the path to access the value from the row object which we'll use to search i.e. `row.meta.value`.\n   * It can be false to disable searching on this field\n   */\n  search?: string | boolean;\n\n  /**\n   * Number of pixels the column should be in the table\n   */\n  width?: number;\n\n  /**\n   * The name of a custom formatter. The available formatters can bee seen in `@rancher/shell/components/formatter`\n   */\n  formatter?: string;\n\n  /**\n   * These options are dependent on the formatter that's chosen. Examples can be seen in `@rancher/shell/components/formatter` and `@rancher/shell/config/table-headers`\n   */\n  formatterOpts?: any;\n\n  /**\n   * Provide a function which accets a row and returns the value that should be displayed in the column\n   * @param row This can be any value which represents the row\n   * @returns Can return {@link string | number | null | undefined} to display in the column\n   */\n  getValue?: (row: any) => string | number | null | undefined;\n}\n\nexport interface ConfigureTypeOptions {\n  /**\n   * The resource can edit/show yaml\n   */\n  canYaml?: boolean;\n\n  /**\n   * Modify the way the name looks when displayed\n   */\n  displayName?: string;\n\n  /**\n   * New resources can be created of this type\n   */\n  isCreatable?: boolean;\n\n  /**\n   * Resources of this type can be deleted/removed\n   */\n  isRemovable?: boolean;\n\n  /**\n   * Resources of this type can be edited\n   */\n  isEditable?: boolean;\n\n  /**\n   * This type should be grouped by namespaces when displayed in a table\n   */\n  namespaced?: boolean;\n\n  /**\n   * Show the age column in when displaying this type in a table\n   */\n  showAge?: boolean;\n\n   /**\n   * Show the masthead at the top of the list view of this type\n   */\n  showListMasthead?: boolean;\n\n   /**\n   * Show the state column in when displaying this type in a table\n   */\n  showState?: boolean;\n\n  /**\n   * Define where this type/page should navigate to (menu entry routing)\n   */\n  customRoute?: Object;\n\n  /**\n   * Leaving these here for completeness but I don't think these should be advertised as useable to plugin creators.\n   */\n  // alias\n  // depaginate\n  // graphConfig\n  // hasGraph\n  // limit\n  // listGroups\n  // localOnly\n  // location\n  // match\n  // realResource\n  // resource\n  // resourceDetail\n  // resourceEdit\n  // showConfigView\n}\n\nexport interface ConfigureVirtualTypeOptions extends ConfigureTypeOptions {\n  /**\n   * The translation key displayed anywhere this type is referenced\n   */\n  labelKey: string;\n\n  /**\n   * An identifier that should be unique across all types\n   */\n  name: string;\n\n  /**\n   * The route that this type should correspond to {@link PluginRouteConfig} {@link RouteConfig}\n   */\n  route: PluginRouteConfig | RouteConfig | Object;\n}\n\nexport interface DSLReturnType {\n  /**\n   * Register multiple types by name and place them all in a group if desired. Primarily used for grouping things in the cluster explorer navigation.\n   * @param types A list of types that are going to be registered\n   * @param group Conditionally a group you want to places all the types in\n   * @returns {@link void}\n   */\n  basicType: (types: string[], group?: string) => void;\n\n  /**\n   * Configure a myriad of options for the specified type\n   * @param type The type to be configured\n   * @param options {@link ConfigureTypeOptions}\n   * @returns {@link void}\n   */\n  configureType: (type: string, options: ConfigureTypeOptions) => void;\n\n  /**\n   * Register the headers/columns that should be used when rendering a table for the specified type.\n   * @param type The type you'd like to register headers/columns for.\n   * @param headers {@link HeaderOptions[]}\n   * @returns {@link void}\n   */\n  headers: (type: string, headers: HeaderOptions[]) => void;\n\n  /**\n   * Create and register a new product\n   * @param options {@link ProductOptions}\n   * @returns {@link void}\n   */\n  product: (options: ProductOptions) => void;\n\n  /**\n   * Create and label a group. The group will show up in navigation\n   * @param groupNane Name of the group\n   * @param label Label in navigation\n   * @returns {@link void}\n   */\n  mapGroup: (groupName: string, label: string) => void;\n\n  /**\n   * Create and configure a myriad of options for a type\n   * @param options {@link ConfigureVirtualTypeOptions}\n   * @returns {@link void}\n   */\n  virtualType: (options: ConfigureVirtualTypeOptions) => void;\n\n  /**\n   * Leaving these here for completeness but I don't think these should be advertised as useable to plugin creators.\n   */\n  // componentForType: (type: string, replacementType: string)\n  // groupBy: (type: string, field: string)\n  // hideBulkActions: (type: string, field)\n  // ignoreGroup: (regexOrString)\n  // ignoreType: (regexOrString)\n  //\n  // mapType: (match, replace)\n  // moveType: (match, group)\n  // setGroupDefaultType: (input, defaultType)\n  // spoofedType: (obj)\n  // weightGroup: (input, weight, forBasic)\n  // weightType: (input, weight, forBasic)\n}\n\n/**\n * Interface for a Dashboard plugin\n */\nexport interface IPlugin {\n  /**\n   * Add a product\n   * @param importFn Function that will import the module containing a product definition\n   */\n  addProduct(importFn: ProductFunction): void;\n\n  /**\n   * Add a locale to the i18n store\n   * @param locale Locale id (e.g. en-us)\n   * @param label Label for the locale to be displayed in the i18n chooser\n   */\n  addLocale(locale: string, label: string): void;\n\n  /**\n   * Plugin metadata\n   */\n  metadata: PackageMetadata;\n\n  /**\n   * Validators used in the same manner as shell/utils/custom-validators\n   */\n  validators: {[key: string]: Function};\n\n  /**\n   * Add a module containing localisations for a specific locale\n   */\n  addL10n(locale: string, fn: Function): void;\n\n  /**\n   * Add a route to the Vue Router\n   */\n  addRoute(route: RouteConfig): void;\n  addRoute(parent: string, route: RouteConfig): void;\n\n  /**\n   * Adds an action/button to the UI\n   */\n  addAction(where: ActionLocation | string, when: LocationConfig | string, action: Action): void;\n\n  /**\n   * Adds a tab to the UI (ResourceTabs component)\n   */\n  addTab(where: TabLocation | string, when: LocationConfig | string, action: Tab): void;\n\n  /**\n   * Adds a panel/component to the UI\n   */\n  addPanel(where: PanelLocation | string, when: LocationConfig | string, action: Panel): void;\n\n  /**\n   * Adds a card to the UI\n   */\n  addCard(where: CardLocation | string, when: LocationConfig | string, action: Card): void;\n\n  /**\n   * Adds a new column to the SortableTable component\n   */\n  addTableColumn(where: TableColumnLocation | string, when: LocationConfig | string, action: TableColumn): void;\n\n  /**\n   * Set the component to use for the landing home page\n   * @param component Home page component\n   */\n  setHomePage(component: any): void;\n\n  /**\n   * Add routes to the Vue Router\n   */\n  addRoutes(routes: PluginRouteConfig[] | RouteConfig[]): void;\n\n   /**\n    * Add a hook to be called when the plugin is uninstalled\n    * @param hook Function to call when the plugin is uninstalled\n    */\n  addUninstallHook(hook: Function): void;\n\n  /**\n   * Add a generic Vuex Store\n   */\n  addStore(storeName: string, register: RegisterStore, unregister: UnregisterStore): void;\n  /**\n   * Add a dashboard Vuex store.\n   *\n   * This will contain the toolset (getters/mutations/actions/etc) required by the dashboard to support Dashboard components. Most of these\n   * will be automatically supplemented when the store is registered, others though will need to be provided to supply package specific\n   * functionality (see storeSpecifics). For instance a component may request to fetch all of a resource type which, via a number of generic\n   * actions, will eventually call a `request` action which will make the raw http request. This is a pkg specific feature so needs the\n   * `request` action needs to be supplied in the `storeSpecifics`\n   */\n  addDashboardStore(storeName: string, storeSpecifics: CoreStoreSpecifics, config: CoreStoreConfig, init?: CoreStoreInit): void;\n\n  /**\n   * Add hooks that will execute when a user navigates\n   * - to a route owned by this package\n   * - from a route owned by this package\n   */\n  addNavHooks(\n    onEnter?: OnNavToPackage,\n    onLeave?: OnNavAwayFromPackage,\n    onLogOut?: OnLogOut\n  ): void;\n\n  /**\n   * Register 'something' that can be dynamically loaded - e.g. model, edit, create, list, i18n\n   * @param {String} type type of thing to register, e.g. 'edit'\n   * @param {String} name unique name of 'something'\n   * @param {Function} fn function that dynamically loads the module for the thing being registered\n   */\n  register(type: string, name: string, fn: Function | Boolean): void;\n\n  /**\n   * Will return all of the configuration functions used for creating a new product.\n   * @param store The store that was passed to the function that's passed to `plugin.addProduct(function)`\n   * @param productName The name of the new product. This name is displayed in the navigation.\n   */\n  DSL(store: any, productName: string): DSLReturnType;\n}\n\n// Internal interface\n// Built-in extensions may use this, but external extensions should not, as this is subject to change\n// Defined as any for now\nexport type IInternal = any;\n","export function importTypes($plugin) { \n};\n","import { importTypes } from '@rancher/auto-import';\nimport {\n  IPlugin,\n  ActionLocation,\n  PanelLocation,\n  TabLocation,\n  CardLocation,\n  TableColumnLocation,\n  ActionOpts,\n} from '@shell/core/types';\n\n\nvar InternalIP = \"127.0.0.1\"\n// Init the package\nexport default function(plugin: IPlugin) {\n  // Auto-import model, detail, edit from the folders\n  importTypes(plugin);\n\n  // Provide plugin metadata from package.json\n  plugin.metadata = require('./package.json');\n\n  // Load a product\n  // plugin.addProduct(require('./product'));\n\n  // HEADER ACTION - GLOBAL\n\n  // ADD A COL TO A TABLE\n  plugin.addTableColumn(\n    TableColumnLocation.RESOURCE,\n    { resource: ['node'] },\n    {\n      name:     'some-prop-col',\n      label: 'Onetouch Url',\n      getValue: (row: any) => {\n        console.log(row)\n        InternalIP = row.status.addresses[0].address+\":30003\";\n        return {url: \"http://\" + row.status.addresses[0].address+\":30003\"};\n      },\n      formatter: 'Link',\n      formatterOpts: {\n        label: 'onetouch',\n        // urlKey: \"http://www.baidu.com\",\n        // target: \"http://www.baidu.com\",\n        // options: {\n        //   href: \"http://www.baidu.com\",\n        //   urlKey: 'http://www.baidu.com',\n        //   target: \"http://www.baidu.com\",\n        //   rel: \"http://www.baidu.com\"\n        // } \n      }, \n    }\n  );\n}\n\nexport const ONETOUCHURL = {\n  name: 'OneTouchURL',\n  label: 'OneTouchURL',\n\n  value: (row: any) => {\n    \n    const internalExternalIP = row.internalIp;\n    return internalExternalIP + \":30003\";\n  },\n  formatter: 'LinkToURL',\n  formatterOpts: { \n\n    options: { \n      internal: true,\n      target: '_blank',\n\n    } \n  }, \n\n}","import './setPublicPath'\nimport mod from '~entry'\nexport default mod\nexport * from '~entry'\n"],"sourceRoot":""}